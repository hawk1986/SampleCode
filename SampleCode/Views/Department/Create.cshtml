@model DepartmentViewModel
@{
    var auth = UnobtrusiveSession.Session["Auth"] as IList<Auth>;
    var action = ViewContext.RouteData.Values["action"] as string;
    var function = auth.First(x => x.Code == "Department" + action);
    ViewBag.Title = function.ModuleName + " / " + function.GroupName + " / " + function.SimpleName;
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            $("#ImageUpload").change(function () {
                src = getObjectURL(this.files[0]);
                $("#image").show().attr("src", src);
                $("#image").parent().find(".nofile").hide();
                $("#image").parent().find(".close").show();
            });

            $("#image").attr("src", $("#image").attr("src"));
            $("#image").load(function () {
                if ($(this).prop("naturalWidth") > $(this).parent().parent().width()) {
                    $(this).css({ width: "100%" });
                } else {
                    $(this).css({ width: "auto" });
                }
                $(this).parent().find(".close").show();
            }).error(function () {
                $(this).hide();
                if ($(this).attr("src") != "") {
                    $(this).parent().find(".nofile,.close").show();
                }
            })
            $(".close").click(function () {
                $(this).parents(".form-group").find("input[type=file]").val('');
                $(this).parent().find("input[type='hidden']").val('');
                $(this).parent().find("img").hide();
                $(this).parent().find(".nofile").hide();
                $(this).hide();
            });
        });
    </script>
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li>
                <a href="#">@function.ModuleName</a>
            </li>
            <li>
                @Html.ActionLink(function.GroupName, "Index")
            </li>
            <li class="active">
                <strong>@function.SimpleName</strong>
            </li>
        </ol>
    </div>
</div>
<div class="wrapper wrapper-content animated">
    <div class="row">
        <div class="col-sm-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    @using (Html.BeginForm(action, "Department", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "create_form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.SequenceNo)
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ParentID, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.ParentID, Model.ParentList, string.Format(Resource.PleaseSelect, Resource.DepartmentParent), new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.ParentID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Abbreviate, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Abbreviate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Abbreviate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DepartmentLevel, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.DepartmentLevel, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DepartmentLevel, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ContactTel, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.ContactTel, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ContactTel, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ContactFax, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.ContactFax, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ContactFax, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.WebSiteUrl, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.WebSiteUrl, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.WebSiteUrl, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ImageUpload, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-2">
                                <input type="file" id="ImageUpload" name="ImageUpload">
                                @Html.ValidationMessageFor(model => model.ImageUpload, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-2">
                                <div class="uploadfile">
                                    <input type="hidden" name="ImagePath" value="@Model.ImagePath" />
                                    <img id="image" src="@Model.ImagePath" onerror="this.src = '/Content/images/none_photo.jpg';" />
                                    <a href="javascript:void(0);" class="close">x</a>
                                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                                    {
                                        <span class="nofile" style="display:none;">@Resource.NoFile</span>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ImageAlt, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.ImageAlt, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ImageAlt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.HeadID, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.HeadID, Model.HeadList, string.Format(Resource.PleaseSelect, Resource.DepartmentHead), new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.HeadID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sequence, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Sequence, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Sequence, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", Resource.Function, new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                <label class="checkbox-inline">
                                    @Html.EditorFor(model => model.IsEnable)
                                    @Resource.IsEnable
                                    @Html.ValidationMessageFor(model => model.IsEnable, "", new { @class = "text-danger" })
                                </label>
                            </div>
                        </div>
                        if (Model.ID != Guid.Empty)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.ImageWidth, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.ImageWidth, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.ImageWidth, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ImageHeight, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.ImageHeight, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.ImageHeight, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.UpdateUser, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.UpdateUser, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UpdateUser, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.UpdateTime, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.UpdateTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UpdateTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CreateUser, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.CreateUser, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.CreateUser, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button type="submit" id="form_submit" class="btn btn-primary"><i class="fa fa-plus"></i> @Resource.Save</button>
                                <button type="reset" class="btn btn-default"><i class="fa fa-eraser"></i> @Resource.Reset</button>
                                <a id="exit_btn" href="@Url.Action("Index")" class="btn btn-danger"><i class="fa fa-sign-out"></i> @Resource.Exit</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
