@model RoleViewModel
@{
    var auth = UnobtrusiveSession.Session["Auth"] as IList<Auth>;
    var action = ViewContext.RouteData.Values["action"] as string;
    var function = auth.First(x => x.Code == "Role" + action);
    ViewBag.Title = function.ModuleName + " / " + function.GroupName + " / " + function.SimpleName;
}
@helper ModuleBlock(string module, List<FunctionViewModel> functionList, List<Guid> access)
{
    var groups = functionList.GroupBy(x => x.GroupName).ToDictionary(x => x.Key, y => y.ToList());
    <tr>
        <th>
            <label class="checkbox-tr-all">
                <input type="checkbox" />
            </label>
        </th>
        <th class="col-sm-2">
            <span class="control-label">@LanguageTool.GetResourceValue(module)</span>
        </th>
        <td class="col-sm-10">
            @foreach (var item in groups)
            {
                @FunctionBlock(item.Key, item.Value, access)
            }
        </td>
    </tr>
}
@helper FunctionBlock(string groupName, List<FunctionViewModel> functionList, List<Guid> access)
{
    <div class="form-group">
        <span class="control-label col-sm-3">@LanguageTool.GetResourceValue(groupName)</span>
        <div class="col-sm-9">
            <div class="checkbox">
                @foreach (var item in functionList)
                {
                    TagBuilder builder = new TagBuilder("input");
                    builder.MergeAttribute("type", "checkbox");
                    builder.MergeAttribute("name", "FunctionID");
                    builder.MergeAttribute("value", item.ID.ToString());
                    builder.MergeAttribute("data-bit", item.BitCode.ToString());
                    builder.MergeAttribute("data-dependency", item.Dependency.ToString());
                    if (access != null && access.Contains(item.ID))
                    {
                        builder.MergeAttribute("checked", "checked");
                    }
                    builder.SetInnerText(string.Concat(" ", LanguageTool.GetResourceValue(item.SimpleName), " "));
                    <label>
                        @Html.Raw(builder.ToString())
                    </label>
                }
            </div>
        </div>
    </div>
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            $('tbody tr').each(function () {
                checkAll($(this).find('td input[type="checkbox"]'), $(this).find('td input[type="checkbox"]:checked'), $(this).find('th input[type="checkbox"]:first'));
            });
            $('td > div.form-group').each(function () {
                var checked = $(this).find('div.checkbox input[type="checkbox"]:checked');
                var all = 0;
                $.each(checked, function (index, element) {
                    all |= $(element).data('dependency');
                });
                $.each(checked, function (index, element) {
                    var bit = $(element).data('bit');
                    if ((bit & all) == bit) {
                        $(element).attr('onclick', 'return false;').addClass('disabled');
                    }
                });
            });
            checkAll('tbody input[type="checkbox"]', 'tbody input[type="checkbox"]:checked', '#all-auth-check');
            $('#all-auth-check').change(function () {
                $('.auth table tbody input[type="checkbox"]').prop('checked', $(this).prop('checked'));
            });
            $('.checkbox-tr-all input[type="checkbox"]').change(function () {
                var all = $(this);
                all.closest('tr').find('td input[type="checkbox"]').each(function () {
                    $(this).prop('checked', all.prop('checked'));
                });
                checkAll('tbody input[type="checkbox"]', 'tbody input[type="checkbox"]:checked', '#all-auth-check');
            });
            $('.auth tbody td input[type="checkbox"]').change(function () {
                var self = $(this);
                var boxSet = self.parents('div.checkbox').find('input[type="checkbox"]');
                var dependency = self.data('dependency');
                $.each(boxSet, function (index, element) {
                    var bit = $(element).data('bit');
                    if ((bit & dependency) == bit) {
                        if (self.prop('checked')) {
                            $(element).prop('checked', true).attr('onclick', 'return false;').addClass('disabled');
                        }
                        else {
                            $(element).prop('checked', false).removeAttr('onclick').removeClass('disabled');
                        }
                    }
                });
                checkAll(self.closest('td').find('input[type="checkbox"]'), self.closest('td').find('input[type="checkbox"]:checked'), self.closest('tr').find('th input[type="checkbox"]:first'));
                checkAll('tbody input[type="checkbox"]', 'tbody input[type="checkbox"]:checked', '#all-auth-check');
            });
        });

        function checkAll(checkAll, check, target) {
            if ($(checkAll).size() > 0) {
                var temp = $(checkAll).size() == $(check).size();
                $(target).prop('checked', temp);
            }
        }
    </script>
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li>
                <a href="#">@function.ModuleName</a>
            </li>
            <li>
                @Html.ActionLink(function.GroupName, "Index")
            </li>
            <li class="active">
                <strong>@function.SimpleName</strong>
            </li>
        </ol>
    </div>
</div>
<div class="wrapper wrapper-content animated">
    <div class="row">
        <div class="col-sm-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    @using (Html.BeginForm(action, "Role", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "create_form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.SequenceNo)
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", Resource.Function, new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                <label class="checkbox-inline">
                                    @Html.EditorFor(model => model.IsEnable)
                                    @Resource.IsEnable
                                    @Html.ValidationMessageFor(model => model.IsEnable, "", new { @class = "text-danger" })
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-2" for="">@Resource.AuthManagement</label>
                            <div class="col-sm-9 auth">
                                <table class="table table-hover table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th><label class="checkbox-all"><input type="checkbox" id="all-auth-check" /></label></th>
                                            <th>@Resource.Module</th>
                                            <th>@Resource.Function</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.FunctionList)
                                        {
                                            @ModuleBlock(item.Key, item.Value, Model.AccessFunction)
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        if (Model.ID != Guid.Empty)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.UpdateUser, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.UpdateUser, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UpdateUser, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.UpdateTime, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.UpdateTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UpdateTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CreateUser, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.CreateUser, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.CreateUser, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-4">
                                    @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button type="submit" id="form_submit" class="btn btn-primary"><i class="fa fa-plus"></i> @Resource.Save</button>
                                <button type="reset" class="btn btn-default"><i class="fa fa-eraser"></i> @Resource.Reset</button>
                                <a id="exit_btn" href="@Url.Action("Index")" class="btn btn-danger"><i class="fa fa-sign-out"></i> @Resource.Exit</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
