#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 09/25/2017 13:04:27
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using SampleCode.Interface;
using SampleCode.Models;
using SampleCode.ViewModel;
using SampleCode.ViewModel.ListResult;
using SampleCode.ViewModel.SearchModel;
using ResourceLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;

namespace SampleCode.Manager
{
    public class FunctionManager : IFunctionManager
    {
        readonly IFunctionRepository _functionRepository;

        public FunctionManager(IFunctionRepository functionRepository)
        {
            _functionRepository = functionRepository;
        }

        /// <summary>
        /// 檢查 Code 是否已經被使用
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public bool CodeBeUse(string code)
        {
            code = code.Trim().ToLower();
            var result = _functionRepository.Any(x => x.Code.ToLower() == code);

            return result;
        }

        /// <summary>
        /// 建立 Function
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(FunctionViewModel entity)
        {
            var item = (Function)entity;

            using (var transaction = _functionRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _functionRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 Function
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _functionRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _functionRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _functionRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 Function
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public FunctionViewModel GetByID(Guid id)
        {
            var item = _functionRepository.GetByID(id);
            var result = (FunctionViewModel)item;

            return result;
        }

        /// <summary>
        /// 取得已存在的 Group 作為自動完成用
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        public List<string> GetGroupName(string query)
        {
            var result = _functionRepository
                .Where(x => x.GroupName.Contains(query))
                .Select(x => x.GroupName)
                .Distinct()
                .ToList();

            return result;
        }

        /// <summary>
        /// 取得目前最大的順序序號
        /// </summary>
        /// <param name="moduleId"></param>
        /// <param name="groupName"></param>
        /// <param name="functionId"></param>
        /// <returns></returns>
        public FunctionSequenceInfo GetSequence(Guid moduleId, string groupName, Guid functionId)
        {
            groupName = groupName.Trim().ToLower();
            var temp = _functionRepository.Where(x => x.IsEnable && x.ModuleID == moduleId && x.GroupName.Trim().ToLower() == groupName).ToList();
            var result = new FunctionSequenceInfo();
            if (null != temp && temp.Count > 0)
            {
                result.GroupSequence = temp.First().GroupSequence;
                result.Sequence += temp.Max(x => x.Sequence);
                result.BitCode += temp.Sum(x => x.BitCode);
                result.DependencyFunctionList = temp.ConvertAll(x => (FunctionViewModel)x);
            }
            else
            {
                result.GroupSequence += _functionRepository.Where(x => x.ModuleID == moduleId).Max(x => x.GroupSequence);
            }
            if (result.DependencyFunctionList.Count > 0)
            {
                foreach (var item in result.DependencyFunctionList)
                {
                    item.SimpleName = LanguageTool.GetResourceValue(item.SimpleName);
                }
                if (functionId != Guid.Empty)
                {
                    result.DependencyFunctionList.RemoveAll(x => x.ID == functionId);
                }
            }

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<FunctionListResult> Paging(FunctionSearchModel searchModel)
        {
            // 預設集合
            var temp = _functionRepository.GetAll();

            if (searchModel.IsEnable.HasValue)
            {
                temp = temp.Where(x => x.IsEnable == searchModel.IsEnable.Value);
            }

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new FunctionListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 ModuleName = x.Module.Name,
                                 Sequence = x.Sequence,
                                 GroupSequence = x.GroupSequence,
                                 Code = x.Code,
                                 GroupName = x.GroupName,
                                 SimpleName = x.SimpleName,
                                 DisplayName = x.DisplayName,
                                 DisplayTree = x.DisplayTree,
                                 DisplayHeader = x.DisplayHeader,
                                 IsEnable = x.IsEnable,
                                 ControllerName = x.ControllerName,
                                 ActionName = x.ActionName,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.ModuleName.Contains(search) ||
                    x.Code.Contains(search) ||
                    x.GroupName.Contains(search) ||
                    x.SimpleName.Contains(search) ||
                    x.DisplayName.Contains(search) ||
                    x.ControllerName.Contains(search) ||
                    x.ActionName.Contains(search) ||
                    false);
            }

            // 進行分頁處理
            var result = new Paging<FunctionListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();
            foreach (var item in result.rows)
            {
                item.ModuleName = LanguageTool.GetResourceValue(item.ModuleName);
                item.GroupName = LanguageTool.GetResourceValue(item.GroupName);
                item.SimpleName = LanguageTool.GetResourceValue(item.SimpleName);
            }

            return result;
        }

        /// <summary>
        /// 更新 Function
        /// </summary>
        /// <param name="entity"></param>
        public void Update(FunctionViewModel entity)
        {
            using (var transaction = _functionRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _functionRepository.GetByID(entity.ID);
                    source.ModuleID = entity.ModuleID;
                    source.Sequence = entity.Sequence;
                    source.GroupSequence = entity.GroupSequence;
                    ////BitCode can't be update
                    //source.BitCode = entity.BitCode;
                    source.Dependency = entity.Dependency;
                    source.Code = entity.Code ?? string.Empty;
                    source.GroupName = entity.GroupName ?? string.Empty;
                    source.SimpleName = entity.SimpleName ?? string.Empty;
                    source.DisplayName = entity.DisplayName ?? string.Empty;
                    source.DisplayTree = entity.DisplayTree;
                    source.DisplayHeader = entity.DisplayHeader;
                    source.IsEnable = entity.IsEnable;
                    source.ControllerName = entity.ControllerName ?? string.Empty;
                    source.ActionName = entity.ActionName ?? string.Empty;

                    _functionRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }
    }
}
#pragma warning restore 1591