#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 09/25/2017 13:04:27
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using SampleCode.Interface;
using SampleCode.Models;
using SampleCode.ViewModel;
using SampleCode.ViewModel.ListResult;
using SampleCode.ViewModel.SearchModel;
using ResourceLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities;
using Utilities.Extensions;
using Utilities.Utility;
using Newtonsoft.Json;
using SampleCode;
using System.Data;
using System.Diagnostics;


namespace SampleCode.Manager
{
    public class UserManager : IUserManager
    {
        MarqueeEntities3 Marquee = new MarqueeEntities3();

        readonly IFunctionRepository _functionRepository;
        readonly IRoleRepository _roleRepository;
        readonly IUserRepository _userRepository;
        readonly IUserChangePassRepository _userChangePassRepository;

        public UserManager(
            IFunctionRepository functionRepository,
            IRoleRepository roleRepository,
            IUserRepository userRepository,
            IUserChangePassRepository userChangePassRepository)
        {
            _functionRepository = functionRepository;
            _roleRepository = roleRepository;
            _userRepository = userRepository;
            _userChangePassRepository = userChangePassRepository;
        }

        /// <summary>
        /// 檢查 Account 是否已經被使用
        /// </summary>
        /// <param name="account"></param>
        /// <returns></returns>
        public bool AccountBeUse(string account)
        {
            account = account.Trim().ToLower();
            var result = _userRepository.Any(x => x.Account.ToLower() == account);

            return result;
        }

        /// <summary>
        /// 變更密碼
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        public bool ChangePassword(ChangePasswordViewModel viewModel)
        {
            var result = false;
            using (var transaction = _userRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    // 找出符合帳號者
                    var user = _userRepository.FirstOrDefault(x =>
                        x.Account.ToLower() == viewModel.Account &&
                        x.IsEnable);
                    // 有這帳號且舊密碼符合
                    if (null != user && viewModel.Password.CheckPbkdf2(user.Password))
                    {
                        // 進行密碼變更
                        user.Password = viewModel.NewPassword.PBKDF2SHA256();
                        user.ChangePassTime = DateTime.Now;
                        user.UpdateUser = user.Name;
                        user.UpdateTime = DateTime.Now;
                        _userRepository.Update(user);
                        transaction.Commit();
                        result = true;
                    }
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }

            return result;
        }

        /// <summary>
        /// 建立 User
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(UserViewModel entity)
        {
            var item = (User)entity;

            using (var transaction = _userRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    // 將身分加入
                    if (null != entity.RoleID && entity.RoleID.Any())
                    {
                        var waitRoles = _roleRepository.Where(x => entity.RoleID.Contains(x.ID)).ToList();
                        item.Role.AddRange(waitRoles);
                    }
                    item.Password = item.Password.PBKDF2SHA256();
                    _userRepository.Create(item);
                    transaction.Commit();
                    //更新快取資料
                    Global.UpdateEntity("User", item);
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 User
        /// </summary>
        /// <param name="id"></param>
        /// <param name="organizations"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _userRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _userRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _userRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                    //更新快取資料
                    Global.UpdateEntity("User", null, id);
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 檢查 e-mail 是否已被使用
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        public bool EmailBeUse(string email)
        {
            var result = _userRepository.Any(x => x.Email.ToLower() == email);

            return result;
        }

        /// <summary>
        /// 取得忘記密碼 TOKEN
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        public string ForgotPassword(ForgotPasswordViewModel viewModel)
        {
            var source = _userRepository.FirstOrDefault(x => x.Email.ToLower() == viewModel.Email);
            if (source != null)
            {
                bool isLogin = source.IsToken;
                //清除登入資料
                source.UpdateTime = viewModel.NowTime;
                source.IsToken = false;
                source.HashToken = (source.Email + viewModel.NowTime.Ticks.ToString()).SHA512();
                source.TokenData = viewModel.NowTime.Ticks.ToString();
                _userRepository.Update(source);

                //判斷是否有登入
                if (isLogin)
                    TokenManager.RemoveUser(source.ID);
                return source.HashToken;
            }
            return string.Empty;
        }

        /// <summary>
        /// 根據 id 取得 User
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public UserViewModel GetByID(Guid id)
        {
            var item = _userRepository.GetByID(id);
            var result = (UserViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<UserListResult> Paging(UserSearchModel searchModel)
        {
            // 預設集合
            var temp = _userRepository.GetAll();

            if (searchModel.IsEnable.HasValue)
            {
                temp = temp.Where(x => x.IsEnable == searchModel.IsEnable.Value);
            }

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new UserListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 Name = x.Name,
                                 Account = x.Account,
                                 Email = x.Email,
                                 IsEnable = x.IsEnable,
                                 UpdateUser = x.UpdateUser,
                                 UpdateTime = x.UpdateTime,
                                 LoginTime = x.LoginTime,
                                 PhotoPath = x.PhotoPath,
                                 DefaultIndex = x.Function.DisplayName,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.Name.Contains(search) ||
                    x.Account.Contains(search) ||
                    x.Email.Contains(search) ||
                    x.PhotoPath.Contains(search) ||
                    x.UpdateUser.Contains(search) ||
                    false);
            }

            // 進行分頁處理
            var result = new Paging<UserListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;
        }

        /// <summary>
        /// 重設密碼
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        public bool ResetPassword(ResetPasswordViewModel viewModel)
        {
            var source = _userRepository.FirstOrDefault(x => x.HashToken == viewModel.HashToken);
            if (source != null)
            {
                //判斷是忘記密碼還是變更密碼
                if (long.TryParse(source.TokenData, out long ticks))
                {
                    //忘記密碼，判斷是否為規定的時間內
                    if (new TimeSpan(DateTime.Now.Ticks - ticks).TotalMinutes <= Tools.GetConfigValue("ForgotPasswordMinute", 30))
                    {
                        changePassword(source, viewModel);
                        return true;
                    }
                }
                else
                {
                    changePassword(source, viewModel);
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 更新 User
        /// </summary>
        /// <param name="entity"></param>
        public void Update(UserViewModel entity)
        {
            using (var transaction = _userRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _userRepository.GetByID(entity.ID);
                    source.Name = entity.Name ?? string.Empty;
                    source.Email = entity.Email ?? string.Empty;
                    source.ContactTel = entity.ContactTel ?? string.Empty;
                    source.IsEnable = entity.IsEnable;
                    source.UpdateUser = entity.UpdateUser;
                    source.UpdateTime = entity.UpdateTime;
                    source.PhotoPath = entity.PhotoPath ?? string.Empty;
                    source.FreeFields = null == entity.FreeFields ? "{}" : entity.FreeFields.ToString();
                    source.DefaultIndex = entity.DefaultIndex;
                    source.DepartmentID = entity.DepartmentID;
                    source.DepartmentIDs = JsonConvert.SerializeObject(entity.DepartmentIDs);

                    //判斷是否更新密碼
                    if (!string.IsNullOrWhiteSpace(entity.Password))
                    {
                        //判斷驗證密碼的更新是否合法
                        if (!verifyChnagePassword(source, entity.Password))
                            throw new ArgumentException(Resource.ChangePasswordSame);

                        //更新密碼
                        source.Password = entity.Password.PBKDF2SHA256();
                        source.ChangePassTime = DateTime.Now;
                    }

                    //清除Token資料
                    source.IsToken = false;
                    source.HashToken = string.Empty;
                    source.TokenData = string.Empty;

                    if (null == entity.RoleID)
                    {
                        entity.RoleID = new List<Guid>();
                    }
                    // 取得新的 role
                    var newRole = _roleRepository.Where(x => entity.RoleID.Contains(x.ID));
                    source.Role.Clear();
                    source.Role.AddRange(newRole);

                    _userRepository.Update(source);
                    transaction.Commit();

                    //移除Token資料
                    TokenManager.RemoveUser(source.ID);

                    //更新快取資料
                    Global.UpdateEntity("User", source);
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 驗證登入帳號，並回傳資訊
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        public UserViewModel ValidateUser(ValidateUserViewModel viewModel)
        {
            var user = _userRepository.FirstOrDefault(x =>
                x.Account.ToLower() == viewModel.Account.ToLower() &&
                x.IsEnable);

            if (null != user/* && viewModel.Password.CheckPbkdf2(user.Password)*/)
            {
                user.LoginTime = viewModel.NowTime;
                _userRepository.Update(user);
                var result = (UserViewModel)user;
                var functionIds = user.Role.SelectMany(x => x.Function.Select(y => y.ID)).Distinct();
                var functions = _functionRepository
                    .dbContext
                    .Set<Function>()
                    .Include("Module")
                    .AsQueryable()
                    .Where(x => functionIds.Contains(x.ID));

                var authList = new List<Auth>();
                foreach (var function in functions)
                {
                    var auth = (Auth)function;
                    if (!authList.Any(x => x.Code == auth.Code))
                    {
                        authList.Add(auth);
                    }
                }
                result.Auth = authList;

                //紀錄登入成功的操作紀錄
                _userRepository.CreateLog(user.ID, "User", "登入成功", 'R', 'S', viewModel.Account);
                return result;
            }

            //紀錄登入失敗的操作紀錄
            _userRepository.CreateLog(Guid.Empty, "User", "登入失敗", 'R', 'F', viewModel.Account);
            return null;
        }

        /// <summary>
        /// 驗證登入帳號，並回傳資訊
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        public UserToken ValidateUserByApi(ValidateUserViewModel viewModel)
        {
            var user = _userRepository.FirstOrDefault(x =>
                x.Account.ToLower() == viewModel.Account.ToLower() &&
                x.IsEnable);

            if (null != user && viewModel.Password.CheckPbkdf2(user.Password))
            {
                //取得使用者資料
                var result = (UserViewModel)user;
                var functionIds = user.Role.SelectMany(x => x.Function.Select(y => y.ID)).Distinct();
                var functions = _functionRepository
                    .dbContext
                    .Set<Function>()
                    .Include("Module")
                    .AsQueryable()
                    .Where(x => functionIds.Contains(x.ID));

                var authList = new List<Auth>();
                foreach (var function in functions)
                {
                    var auth = (Auth)function;
                    if (!authList.Any(x => x.Code == auth.Code))
                    {
                        authList.Add(auth);
                    }
                }
                result.Auth = authList;

                //建立Token
                var token = TokenManager.Create(result);
                user.LoginTime = viewModel.NowTime;
                //紀錄Token資訊
                user.IsToken = true;
                user.HashToken = token.Token;
                user.TokenData = JsonConvert.SerializeObject(token.Data);
                _userRepository.Update(user);

                return token;
            }

            return null;
        }

        /// <summary>
        /// 清除Token資料
        /// </summary>
        /// <param name="viewModel"></param>
        public void ClearToken(UserViewModel viewModel)
        {
            var source = _userRepository.GetByID(viewModel.ID);
            if (source != null)
            {
                using (var transaction = _userRepository.dbContext.Database.BeginTransaction())
                {
                    try
                    {
                        source.IsToken = false;
                        source.HashToken = string.Empty;
                        source.TokenData = string.Empty;

                        _userRepository.Update(source);
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// 變更密碼
        /// </summary>
        /// <param name="source"></param>
        /// <param name="viewModel"></param>
        private void changePassword(User source, ResetPasswordViewModel viewModel)
        {
            //判斷驗證密碼的更新是否合法
            if (!verifyChnagePassword(source, viewModel.NewPassword))
                throw new ArgumentException(Resource.ChangePasswordSame);

            bool isLogin = source.IsToken;
            //變更密碼
            source.Password = viewModel.NewPassword.PBKDF2SHA256();
            source.ChangePassTime = DateTime.Now;
            source.UpdateUser = source.Name;
            source.UpdateTime = DateTime.Now;
            source.IsToken = false;
            source.HashToken = string.Empty;
            source.TokenData = string.Empty;
            _userRepository.Update(source);

            //變更密碼，判斷是否有登入
            if (isLogin)
                TokenManager.RemoveUser(source.ID);
        }

        /// <summary>
        /// 驗證變更密碼的機制
        /// </summary>
        /// <param name="source"></param>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        private bool verifyChnagePassword(User source, string newPassword)
        {
            int n = Tools.GetConfigValue("ChangePasswordSameTimes", 0);
            if (n > 0)
            {
                bool result = _userChangePassRepository.Where(x => x.UserID == source.ID).OrderByDescending(x => x.ChangeTime).Take(n).Any(x => x.Password == newPassword);
                //判斷是否新增密碼變更紀錄
                if (result)
                    _userChangePassRepository.Create(new UserChangePass { ID = Guid.NewGuid(), UserID = source.ID, Password = newPassword, ChangeTime = DateTime.Now });
                return result;
            }
            return true;
        }

        /// <summary>
        /// GetMarquees
        /// </summary>
        /// <returns></returns>
        public List<string> GetMarquees()
        {            
            return Marquee.Marquees.Select(x => x.MarqueeContent).ToList();
        }
            
    }
}
#pragma warning restore 1591