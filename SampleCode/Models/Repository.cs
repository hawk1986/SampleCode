#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using EntityFramework.BulkInsert.Extensions;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Web;

namespace SampleCode.Models
{
    public abstract class Repository<T> : IRepository<T> where T : class
    {
        protected IDbSet<T> dbSet { get; set; }

        public DbContext dbContext { get; set; }

        public Repository(DbContext context)
        {
            dbContext = context;
            dbSet = dbContext.Set<T>();
        }

        /// <summary>
        /// 新增日誌
        /// </summary>
        /// <param name="id"></param>
        /// <param name="table"></param>
        /// <param name="name"></param>
        /// <param name="action"></param>
        /// <param name="result"></param>
        /// <param name="user"></param>
        public void CreateLog(Guid id, string table, string name, char action, char result, string user)
        {
            if (!string.IsNullOrEmpty(name) && name.Length > 100)
                name = name.Substring(0, 100);
            dbContext.Set<OperateRecord>().Add(new OperateRecord
            {
                ID = Guid.NewGuid(),
                RecordID = id,
                TableName = table ?? string.Empty,
                RecordInfo = name ?? string.Empty,
                Action = action.ToString(),
                Result = result.ToString(),
                OperateIP = HttpContext.Current.Request.UserHostAddress,
                OperateUser = user,
                OperateTime = DateTime.Now
            });
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 檢查是否存在任何物件
        /// </summary>
        /// <returns></returns>
        public virtual bool Any()
        {
            return dbSet.Any();
        }

        /// <summary>
        /// 檢查是否存在任何符合條件的物件
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public virtual bool Any(Expression<Func<T, bool>> predicate)
        {
            return dbSet.Any(predicate);
        }

        /// <summary>
        /// 批次建立 T
        /// </summary>
        /// <param name="entitySet"></param>
        public void Create(List<T> entitySet)
        {
            dbContext.BulkInsert(entitySet);
        }

        /// <summary>
        /// 建立 T
        /// </summary>
        /// <param name="entity"></param>
        public virtual void Create(T entity)
        {
            dbSet.Add(entity);
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 依條件刪除 T
        /// </summary>
        /// <param name="predicate"></param>
        public virtual void Delete(Expression<Func<T, bool>> predicate)
        {
            foreach (T entity in dbSet.Where(predicate).ToList())
            {
                dbSet.Remove(entity);
            }
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 刪除 T
        /// </summary>
        /// <param name="entity"></param>
        public virtual void Delete(T entity)
        {
            if (dbContext.Entry(entity).State == EntityState.Detached)
            {
                dbSet.Attach(entity);
            }
            dbSet.Remove(entity);
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 回傳第一筆
        /// </summary>
        /// <returns></returns>
        public virtual T FirstOrDefault()
        {
            return dbSet.FirstOrDefault();
        }

        /// <summary>
        /// 回傳符合條件的第一筆
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public virtual T FirstOrDefault(Expression<Func<T, bool>> predicate)
        {
            return dbSet.FirstOrDefault(predicate);
        }

        /// <summary>
        /// 取得全部的 T
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<T> GetAll()
        {
            return dbSet;
        }

        /// <summary>
        /// 根據 ID 尋找 T
        /// </summary>
        /// <param name="keyValues"></param>
        /// <returns></returns>
        public virtual T GetByID(params object[] keyValues)
        {
            return dbSet.Find(keyValues);
        }

        /// <summary>
        /// 更新 T
        /// </summary>
        /// <param name="entity"></param>
        public virtual void Update(T entity)
        {
            dbContext.Entry(entity).State = EntityState.Modified;
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 更新 T
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="includeProperties"></param>
        public virtual void Update(T entity, params Expression<Func<T, object>>[] includeProperties)
        {
            var dbEntry = dbContext.Entry(entity);
            foreach (var includeProperty in includeProperties)
            {
                dbEntry.Property(includeProperty).IsModified = true;
            }
            dbContext.SaveChanges();
        }

        /// <summary>
        /// 根據條件尋找 T
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public virtual IQueryable<T> Where(Expression<Func<T, bool>> predicate)
        {
            return dbSet.Where(predicate);
        }
    }
}
#pragma warning restore 1591
